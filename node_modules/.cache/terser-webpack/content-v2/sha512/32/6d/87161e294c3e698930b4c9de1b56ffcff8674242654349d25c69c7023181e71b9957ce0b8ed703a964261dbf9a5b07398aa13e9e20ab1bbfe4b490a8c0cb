{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{k5eQ:function(t,e,o){\"use strict\";o.r(e),o.d(e,\"ion_route\",function(){return a}),o.d(e,\"ion_route_redirect\",function(){return h}),o.d(e,\"ion_router\",function(){return S}),o.d(e,\"ion_router_link\",function(){return D});var n=o(\"wEJo\"),r=o(\"1vRN\"),i=o(\"E/Mt\"),s=o(\"74mu\");const a=class{constructor(t){Object(n.o)(this,t),this.ionRouteDataChanged=Object(n.g)(this,\"ionRouteDataChanged\",7),this.url=\"\"}onUpdate(t){this.ionRouteDataChanged.emit(t)}onComponentProps(t,e){if(t===e)return;const o=t?Object.keys(t):[],n=e?Object.keys(e):[];if(o.length===n.length){for(const r of o)if(t[r]!==e[r])return void this.onUpdate(t)}else this.onUpdate(t)}connectedCallback(){this.ionRouteDataChanged.emit()}static get watchers(){return{url:[\"onUpdate\"],component:[\"onUpdate\"],componentProps:[\"onComponentProps\"]}}},h=class{constructor(t){Object(n.o)(this,t),this.ionRouteRedirectChanged=Object(n.g)(this,\"ionRouteRedirectChanged\",7)}propDidChange(){this.ionRouteRedirectChanged.emit()}connectedCallback(){this.ionRouteRedirectChanged.emit()}static get watchers(){return{from:[\"propDidChange\"],to:[\"propDidChange\"]}}},c=\"root\",l=\"forward\",u=t=>\"/\"+t.filter(t=>t.length>0).join(\"/\"),d=t=>{if(null==t)return[\"\"];const e=t.split(\"?\")[0].split(\"/\").map(t=>t.trim()).filter(t=>t.length>0);return 0===e.length?[\"\"]:e},f=async(t,e,o,n,i=!1,s)=>{try{const a=p(t);if(n>=e.length||!a)return i;await new Promise(t=>Object(r.c)(a,t));const h=e[n],l=await a.setRouteId(h.id,h.params,o,s);return l.changed&&(o=c,i=!0),i=await f(l.element,e,o,n+1,i,s),l.markVisible&&await l.markVisible(),i}catch(a){return console.error(a),!1}},g=\":not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet\",p=t=>{if(t)return t.matches(g)?t:t.querySelector(g)||void 0},b=(t,e)=>e.find(e=>((t,e)=>{const{from:o,to:n}=e;if(void 0===n)return!1;if(o.length>t.length)return!1;for(let r=0;r<o.length;r++){const e=o[r];if(\"*\"===e)return!0;if(e!==t[r])return!1}return o.length===t.length})(t,e)),m=(t,e)=>{const o=Math.min(t.length,e.length);let n=0;for(;n<o&&t[n].toLowerCase()===e[n].id;n++);return n},w=(t,e)=>{const o=new C(t);let n,r=!1;for(let i=0;i<e.length;i++){const t=e[i].path;if(\"\"===t[0])r=!0;else{for(const e of t){const t=o.next();if(\":\"===e[0]){if(\"\"===t)return null;n=n||[],(n[i]||(n[i]={}))[e.slice(1)]=t}else if(t!==e)return null}r=!1}}return r&&r!==(\"\"===o.next())?null:n?e.map((t,e)=>({id:t.id,path:t.path,params:v(t.params,n[e]),beforeEnter:t.beforeEnter,beforeLeave:t.beforeLeave})):e},v=(t,e)=>t||e?Object.assign(Object.assign({},t),e):void 0,R=(t,e)=>{let o=null,n=0;for(const r of e){const e=w(t,r);if(null!==e){const t=y(e);t>n&&(n=t,o=e)}}return o},y=t=>{let e=1,o=1;for(const n of t)for(const t of n.path)\":\"===t[0]?e+=Math.pow(1,o):\"\"!==t&&(e+=Math.pow(2,o)),o++;return e};class C{constructor(t){this.path=t.slice()}next(){return this.path.length>0?this.path.shift():\"\"}}const j=t=>Array.from(t.children).filter(t=>\"ION-ROUTE-REDIRECT\"===t.tagName).map(t=>{const e=E(t,\"to\");return{from:d(E(t,\"from\")),to:null==e?void 0:d(e)}}),O=t=>k(P(t)),P=(t,e=t)=>Array.from(e.children).filter(t=>\"ION-ROUTE\"===t.tagName&&t.component).map(e=>{const o=E(e,\"component\");if(null==o)throw new Error(\"component missing in ion-route\");return{path:d(E(e,\"url\")),id:o.toLowerCase(),params:e.componentProps,beforeLeave:e.beforeLeave,beforeEnter:e.beforeEnter,children:P(t,e)}}),E=(t,e)=>e in t?t[e]:t.hasAttribute(e)?t.getAttribute(e):null,k=t=>{const e=[];for(const o of t)L([],e,o);return e},L=(t,e,o)=>{const n=t.slice();if(n.push({id:o.id,path:o.path,params:o.params,beforeLeave:o.beforeLeave,beforeEnter:o.beforeEnter}),0!==o.children.length)for(const r of o.children)L(n,e,r);else e.push(n)},S=class{constructor(t){Object(n.o)(this,t),this.ionRouteWillChange=Object(n.g)(this,\"ionRouteWillChange\",7),this.ionRouteDidChange=Object(n.g)(this,\"ionRouteDidChange\",7),this.previousPath=null,this.busy=!1,this.state=0,this.lastState=0,this.root=\"/\",this.useHash=!0}async componentWillLoad(){console.debug(\"[ion-router] router will load\"),await(p(document.body)?Promise.resolve():new Promise(t=>{window.addEventListener(\"ionNavWillLoad\",t,{once:!0})})),console.debug(\"[ion-router] found nav\"),await this.onRoutesChanged()}componentDidLoad(){window.addEventListener(\"ionRouteRedirectChanged\",Object(r.n)(this.onRedirectChanged.bind(this),10)),window.addEventListener(\"ionRouteDataChanged\",Object(r.n)(this.onRoutesChanged.bind(this),100))}async onPopState(){const t=this.historyDirection();let e=this.getPath();const o=await this.runGuards(e);return!0!==o?(\"object\"==typeof o&&(e=d(o.redirect)),!1):(console.debug(\"[ion-router] URL changed -> update nav\",e,t),this.writeNavStateRoot(e,t))}onBackButton(t){t.detail.register(0,t=>{this.back(),t()})}async canTransition(){const t=await this.runGuards();return!0===t||\"object\"==typeof t&&t.redirect}async push(t,e=\"forward\",o){t.startsWith(\".\")&&(t=new URL(t,window.location.href).pathname),console.debug(\"[ion-router] URL pushed -> updating nav\",t,e);let n=d(t),r=t.split(\"?\")[1];const i=await this.runGuards(n);if(!0!==i){if(\"object\"!=typeof i)return!1;n=d(i.redirect),r=i.redirect.split(\"?\")[1]}return this.setPath(n,e,r),this.writeNavStateRoot(n,e,o)}back(){return window.history.back(),Promise.resolve(this.waitPromise)}async printDebug(){console.debug(\"CURRENT PATH\",this.getPath()),console.debug(\"PREVIOUS PATH\",this.previousPath),(t=>{console.group(`[ion-core] ROUTES[${t.length}]`);for(const e of t){const t=[];e.forEach(e=>t.push(...e.path));const o=e.map(t=>t.id);console.debug(`%c ${u(t)}`,\"font-weight: bold; padding-left: 20px\",\"=>\\t\",`(${o.join(\", \")})`)}console.groupEnd()})(O(this.el)),(t=>{console.group(`[ion-core] REDIRECTS[${t.length}]`);for(const e of t)e.to&&console.debug(\"FROM: \",`$c ${u(e.from)}`,\"font-weight: bold\",\" TO: \",`$c ${u(e.to)}`,\"font-weight: bold\");console.groupEnd()})(j(this.el))}async navChanged(t){if(this.busy)return console.warn(\"[ion-router] router is busy, navChanged was cancelled\"),!1;const{ids:e,outlet:o}=await(async t=>{const e=[];let o,n=window.document.body;for(;o=p(n),o;){const t=await o.getRouteId();if(!t)break;n=t.element,t.element=void 0,e.push(t)}return{ids:e,outlet:o}})(),n=((t,e)=>{let o=null,n=0;const r=t.map(t=>t.id);for(const i of e){const t=m(r,i);t>n&&(o=i,n=t)}return o?o.map((e,o)=>({id:e.id,path:e.path,params:v(e.params,t[o]&&t[o].params)})):null})(e,O(this.el));if(!n)return console.warn(\"[ion-router] no matching URL for \",e.map(t=>t.id)),!1;const r=(t=>{const e=[];for(const o of t)for(const t of o.path)if(\":\"===t[0]){const n=o.params&&o.params[t.slice(1)];if(!n)return null;e.push(n)}else\"\"!==t&&e.push(t);return e})(n);return r?(console.debug(\"[ion-router] nav changed -> update URL\",e,r),this.setPath(r,t),await this.safeWriteNavState(o,n,c,r,null,e.length),!0):(console.warn(\"[ion-router] router could not match path because some required param is missing\"),!1)}onRedirectChanged(){const t=this.getPath();t&&b(t,j(this.el))&&this.writeNavStateRoot(t,c)}onRoutesChanged(){return this.writeNavStateRoot(this.getPath(),c)}historyDirection(){const t=window;null===t.history.state&&(this.state++,t.history.replaceState(this.state,t.document.title,t.document.location&&t.document.location.href));const e=t.history.state,o=this.lastState;return this.lastState=e,e>o||e>=o&&o>0?l:e<o?\"back\":c}async writeNavStateRoot(t,e,o){if(!t)return console.error(\"[ion-router] URL is not part of the routing set\"),!1;const n=j(this.el),r=b(t,n);let i=null;r&&(this.setPath(r.to,e),i=r.from,t=r.to);const s=O(this.el),a=R(t,s);return a?this.safeWriteNavState(document.body,a,e,t,i,0,o):(console.error(\"[ion-router] the path does not match any route\"),!1)}async safeWriteNavState(t,e,o,n,r,i=0,s){const a=await this.lock();let h=!1;try{h=await this.writeNavState(t,e,o,n,r,i,s)}catch(c){console.error(c)}return a(),h}async lock(){const t=this.waitPromise;let e;return this.waitPromise=new Promise(t=>e=t),void 0!==t&&await t,e}async runGuards(t=this.getPath(),e=d(this.previousPath)){if(!t||!e)return!0;const o=O(this.el),n=R(t,o),r=R(e,o),i=n&&n[n.length-1].beforeEnter,s=r&&r[r.length-1].beforeLeave,a=!s||await s();if(!1===a||\"object\"==typeof a)return a;const h=!i||await i();return!1!==h&&\"object\"!=typeof h||h}async writeNavState(t,e,o,n,r,i=0,s){if(this.busy)return console.warn(\"[ion-router] router is busy, transition was cancelled\"),!1;this.busy=!0;const a=this.routeChangeEvent(n,r);a&&this.ionRouteWillChange.emit(a);const h=await f(t,e,o,i,!1,s);return this.busy=!1,h&&console.debug(\"[ion-router] route changed\",n),a&&this.ionRouteDidChange.emit(a),h}setPath(t,e,o){this.state++,((t,e,o,n,r,i,s)=>{let a=u([...d(this.root),...n]);o&&(a=\"#\"+a),void 0!==s&&(a=a+\"?\"+s),r===l?t.pushState(i,\"\",a):t.replaceState(i,\"\",a)})(window.history,0,this.useHash,t,e,this.state,o)}getPath(){return((t,e,o)=>{let n=t.pathname;if(this.useHash){const e=t.hash;n=\"#\"===e[0]?e.slice(1):\"\"}return((t,e)=>{if(t.length>e.length)return null;if(t.length<=1&&\"\"===t[0])return e;for(let o=0;o<t.length;o++)if(t[o].length>0&&t[o]!==e[o])return null;return e.length===t.length?[\"\"]:e.slice(t.length)})(d(e),d(n))})(window.location,this.root)}routeChangeEvent(t,e){const o=this.previousPath,n=u(t);return this.previousPath=n,n===o?null:{from:o,redirectedFrom:e?u(e):null,to:n}}get el(){return Object(n.k)(this)}},D=class{constructor(t){Object(n.o)(this,t),this.routerDirection=\"forward\",this.onClick=t=>{Object(s.d)(this.href,t,this.routerDirection,this.routerAnimation)}}render(){const t=Object(i.b)(this),e={href:this.href,rel:this.rel,target:this.target};return Object(n.j)(n.c,{onClick:this.onClick,class:Object(s.a)(this.color,{[t]:!0,\"ion-activatable\":!0})},Object(n.j)(\"a\",Object.assign({},e),Object(n.j)(\"slot\",null)))}};D.style=\":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\"}}]);","name":"49.7feeefa3e5490bdf9c16.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[49],{\n\n/***/ \"k5eQ\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_route\", function() { return Route; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_route_redirect\", function() { return RouteRedirect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_router\", function() { return Router; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_router_link\", function() { return RouterLink; });\n/* harmony import */ var _index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"wEJo\");\n/* harmony import */ var _helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"1vRN\");\n/* harmony import */ var _ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"E/Mt\");\n/* harmony import */ var _theme_ff3fc52f_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"74mu\");\n\n\n\n\n\nconst Route = class {\n  constructor(hostRef) {\n    Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* r */ \"o\"])(this, hostRef);\n    this.ionRouteDataChanged = Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* e */ \"g\"])(this, \"ionRouteDataChanged\", 7);\n    /**\n     * Relative path that needs to match in order for this route to apply.\n     *\n     * Accepts paths similar to expressjs so that you can define parameters\n     * in the url /foo/:bar where bar would be available in incoming props.\n     */\n    this.url = '';\n  }\n  onUpdate(newValue) {\n    this.ionRouteDataChanged.emit(newValue);\n  }\n  onComponentProps(newValue, oldValue) {\n    if (newValue === oldValue) {\n      return;\n    }\n    const keys1 = newValue ? Object.keys(newValue) : [];\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\n    if (keys1.length !== keys2.length) {\n      this.onUpdate(newValue);\n      return;\n    }\n    for (const key of keys1) {\n      if (newValue[key] !== oldValue[key]) {\n        this.onUpdate(newValue);\n        return;\n      }\n    }\n  }\n  connectedCallback() {\n    this.ionRouteDataChanged.emit();\n  }\n  static get watchers() { return {\n    \"url\": [\"onUpdate\"],\n    \"component\": [\"onUpdate\"],\n    \"componentProps\": [\"onComponentProps\"]\n  }; }\n};\n\nconst RouteRedirect = class {\n  constructor(hostRef) {\n    Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* r */ \"o\"])(this, hostRef);\n    this.ionRouteRedirectChanged = Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* e */ \"g\"])(this, \"ionRouteRedirectChanged\", 7);\n  }\n  propDidChange() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  connectedCallback() {\n    this.ionRouteRedirectChanged.emit();\n  }\n  static get watchers() { return {\n    \"from\": [\"propDidChange\"],\n    \"to\": [\"propDidChange\"]\n  }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\n  const path = segments\n    .filter(s => s.length > 0)\n    .join('/');\n  return '/' + path;\n};\nconst chainToPath = (chain) => {\n  const path = [];\n  for (const route of chain) {\n    for (const segment of route.path) {\n      if (segment[0] === ':') {\n        const param = route.params && route.params[segment.slice(1)];\n        if (!param) {\n          return null;\n        }\n        path.push(param);\n      }\n      else if (segment !== '') {\n        path.push(segment);\n      }\n    }\n  }\n  return path;\n};\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\n  let url = generatePath([\n    ...parsePath(root),\n    ...path\n  ]);\n  if (useHash) {\n    url = '#' + url;\n  }\n  if (queryString !== undefined) {\n    url = url + '?' + queryString;\n  }\n  if (direction === ROUTER_INTENT_FORWARD) {\n    history.pushState(state, '', url);\n  }\n  else {\n    history.replaceState(state, '', url);\n  }\n};\nconst removePrefix = (prefix, path) => {\n  if (prefix.length > path.length) {\n    return null;\n  }\n  if (prefix.length <= 1 && prefix[0] === '') {\n    return path;\n  }\n  for (let i = 0; i < prefix.length; i++) {\n    if (prefix[i].length > 0 && prefix[i] !== path[i]) {\n      return null;\n    }\n  }\n  if (path.length === prefix.length) {\n    return [''];\n  }\n  return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n  let pathname = loc.pathname;\n  if (useHash) {\n    const hash = loc.hash;\n    pathname = (hash[0] === '#')\n      ? hash.slice(1)\n      : '';\n  }\n  const prefix = parsePath(root);\n  const path = parsePath(pathname);\n  return removePrefix(prefix, path);\n};\nconst parsePath = (path) => {\n  if (path == null) {\n    return [''];\n  }\n  const removeQueryString = path.split('?')[0];\n  const segments = removeQueryString.split('/')\n    .map(s => s.trim())\n    .filter(s => s.length > 0);\n  if (segments.length === 0) {\n    return [''];\n  }\n  else {\n    return segments;\n  }\n};\n\nconst printRoutes = (routes) => {\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\n  for (const chain of routes) {\n    const path = [];\n    chain.forEach(r => path.push(...r.path));\n    const ids = chain.map(r => r.id);\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n  }\n  console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n  for (const redirect of redirects) {\n    if (redirect.to) {\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\n    }\n  }\n  console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\n  try {\n    // find next navigation outlet in the DOM\n    const outlet = searchNavNode(root);\n    // make sure we can continue interacting the DOM, otherwise abort\n    if (index >= chain.length || !outlet) {\n      return changed;\n    }\n    await new Promise(resolve => Object(_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_1__[\"c\"])(outlet, resolve));\n    const route = chain[index];\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\n    // if the outlet changed the page, reset navigation to neutral (no direction)\n    // this means nested outlets will not animate\n    if (result.changed) {\n      direction = ROUTER_INTENT_NONE;\n      changed = true;\n    }\n    // recursively set nested outlets\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\n    // once all nested outlets are visible let's make the parent visible too,\n    // using markVisible prevents flickering\n    if (result.markVisible) {\n      await result.markVisible();\n    }\n    return changed;\n  }\n  catch (e) {\n    console.error(e);\n    return false;\n  }\n};\nconst readNavState = async (root) => {\n  const ids = [];\n  let outlet;\n  let node = root;\n  // tslint:disable-next-line:no-constant-condition\n  while (true) {\n    outlet = searchNavNode(node);\n    if (outlet) {\n      const id = await outlet.getRouteId();\n      if (id) {\n        node = id.element;\n        id.element = undefined;\n        ids.push(id);\n      }\n      else {\n        break;\n      }\n    }\n    else {\n      break;\n    }\n  }\n  return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n  if (searchNavNode(document.body)) {\n    return Promise.resolve();\n  }\n  return new Promise(resolve => {\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\n  });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n  if (!root) {\n    return undefined;\n  }\n  if (root.matches(QUERY)) {\n    return root;\n  }\n  const outlet = root.querySelector(QUERY);\n  return outlet ? outlet : undefined;\n};\n\nconst matchesRedirect = (input, route) => {\n  const { from, to } = route;\n  if (to === undefined) {\n    return false;\n  }\n  if (from.length > input.length) {\n    return false;\n  }\n  for (let i = 0; i < from.length; i++) {\n    const expected = from[i];\n    if (expected === '*') {\n      return true;\n    }\n    if (expected !== input[i]) {\n      return false;\n    }\n  }\n  return from.length === input.length;\n};\nconst routeRedirect = (path, routes) => {\n  return routes.find(route => matchesRedirect(path, route));\n};\nconst matchesIDs = (ids, chain) => {\n  const len = Math.min(ids.length, chain.length);\n  let i = 0;\n  for (; i < len; i++) {\n    if (ids[i].toLowerCase() !== chain[i].id) {\n      break;\n    }\n  }\n  return i;\n};\nconst matchesPath = (inputPath, chain) => {\n  const segments = new RouterSegments(inputPath);\n  let matchesDefault = false;\n  let allparams;\n  for (let i = 0; i < chain.length; i++) {\n    const path = chain[i].path;\n    if (path[0] === '') {\n      matchesDefault = true;\n    }\n    else {\n      for (const segment of path) {\n        const data = segments.next();\n        // data param\n        if (segment[0] === ':') {\n          if (data === '') {\n            return null;\n          }\n          allparams = allparams || [];\n          const params = allparams[i] || (allparams[i] = {});\n          params[segment.slice(1)] = data;\n        }\n        else if (data !== segment) {\n          return null;\n        }\n      }\n      matchesDefault = false;\n    }\n  }\n  const matches = (matchesDefault)\n    ? matchesDefault === (segments.next() === '')\n    : true;\n  if (!matches) {\n    return null;\n  }\n  if (allparams) {\n    return chain.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, allparams[i]),\n      beforeEnter: route.beforeEnter,\n      beforeLeave: route.beforeLeave\n    }));\n  }\n  return chain;\n};\n// Merges the route parameter objects.\n// Returns undefined when both parameters are undefined.\nconst mergeParams = (a, b) => {\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n  let match = null;\n  let maxMatches = 0;\n  const plainIDs = ids.map(i => i.id);\n  for (const chain of chains) {\n    const score = matchesIDs(plainIDs, chain);\n    if (score > maxMatches) {\n      match = chain;\n      maxMatches = score;\n    }\n  }\n  if (match) {\n    return match.map((route, i) => ({\n      id: route.id,\n      path: route.path,\n      params: mergeParams(route.params, ids[i] && ids[i].params)\n    }));\n  }\n  return null;\n};\nconst routerPathToChain = (path, chains) => {\n  let match = null;\n  let matches = 0;\n  for (const chain of chains) {\n    const matchedChain = matchesPath(path, chain);\n    if (matchedChain !== null) {\n      const score = computePriority(matchedChain);\n      if (score > matches) {\n        matches = score;\n        match = matchedChain;\n      }\n    }\n  }\n  return match;\n};\nconst computePriority = (chain) => {\n  let score = 1;\n  let level = 1;\n  for (const route of chain) {\n    for (const path of route.path) {\n      if (path[0] === ':') {\n        score += Math.pow(1, level);\n      }\n      else if (path !== '') {\n        score += Math.pow(2, level);\n      }\n      level++;\n    }\n  }\n  return score;\n};\nclass RouterSegments {\n  constructor(path) {\n    this.path = path.slice();\n  }\n  next() {\n    if (this.path.length > 0) {\n      return this.path.shift();\n    }\n    return '';\n  }\n}\n\nconst readRedirects = (root) => {\n  return Array.from(root.children)\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n    .map(el => {\n    const to = readProp(el, 'to');\n    return {\n      from: parsePath(readProp(el, 'from')),\n      to: to == null ? undefined : parsePath(to),\n    };\n  });\n};\nconst readRoutes = (root) => {\n  return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (root, node = root) => {\n  return Array.from(node.children)\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n    .map(el => {\n    const component = readProp(el, 'component');\n    if (component == null) {\n      throw new Error('component missing in ion-route');\n    }\n    return {\n      path: parsePath(readProp(el, 'url')),\n      id: component.toLowerCase(),\n      params: el.componentProps,\n      beforeLeave: el.beforeLeave,\n      beforeEnter: el.beforeEnter,\n      children: readRouteNodes(root, el)\n    };\n  });\n};\nconst readProp = (el, prop) => {\n  if (prop in el) {\n    return el[prop];\n  }\n  if (el.hasAttribute(prop)) {\n    return el.getAttribute(prop);\n  }\n  return null;\n};\nconst flattenRouterTree = (nodes) => {\n  const routes = [];\n  for (const node of nodes) {\n    flattenNode([], routes, node);\n  }\n  return routes;\n};\nconst flattenNode = (chain, routes, node) => {\n  const s = chain.slice();\n  s.push({\n    id: node.id,\n    path: node.path,\n    params: node.params,\n    beforeLeave: node.beforeLeave,\n    beforeEnter: node.beforeEnter\n  });\n  if (node.children.length === 0) {\n    routes.push(s);\n    return;\n  }\n  for (const sub of node.children) {\n    flattenNode(s, routes, sub);\n  }\n};\n\nconst Router = class {\n  constructor(hostRef) {\n    Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* r */ \"o\"])(this, hostRef);\n    this.ionRouteWillChange = Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* e */ \"g\"])(this, \"ionRouteWillChange\", 7);\n    this.ionRouteDidChange = Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* e */ \"g\"])(this, \"ionRouteDidChange\", 7);\n    this.previousPath = null;\n    this.busy = false;\n    this.state = 0;\n    this.lastState = 0;\n    /**\n     * By default `ion-router` will match the routes at the root path (\"/\").\n     * That can be changed when\n     *\n     */\n    this.root = '/';\n    /**\n     * The router can work in two \"modes\":\n     * - With hash: `/index.html#/path/to/page`\n     * - Without hash: `/path/to/page`\n     *\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\n     *\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n     * requires additional server-side configuration in order to properly work.\n     *\n     * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n     *\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\n     */\n    this.useHash = true;\n  }\n  async componentWillLoad() {\n    console.debug('[ion-router] router will load');\n    await waitUntilNavNode();\n    console.debug('[ion-router] found nav');\n    await this.onRoutesChanged();\n  }\n  componentDidLoad() {\n    window.addEventListener('ionRouteRedirectChanged', Object(_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_1__[\"n\"])(this.onRedirectChanged.bind(this), 10));\n    window.addEventListener('ionRouteDataChanged', Object(_helpers_dd7e4b7b_js__WEBPACK_IMPORTED_MODULE_1__[\"n\"])(this.onRoutesChanged.bind(this), 100));\n  }\n  async onPopState() {\n    const direction = this.historyDirection();\n    let path = this.getPath();\n    const canProceed = await this.runGuards(path);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        path = parsePath(canProceed.redirect);\n      }\n      return false;\n    }\n    console.debug('[ion-router] URL changed -> update nav', path, direction);\n    return this.writeNavStateRoot(path, direction);\n  }\n  onBackButton(ev) {\n    ev.detail.register(0, processNextHandler => {\n      this.back();\n      processNextHandler();\n    });\n  }\n  /** @internal */\n  async canTransition() {\n    const canProceed = await this.runGuards();\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        return canProceed.redirect;\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Navigate to the specified URL.\n   *\n   * @param url The url to navigate to.\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\n   */\n  async push(url, direction = 'forward', animation) {\n    if (url.startsWith('.')) {\n      url = (new URL(url, window.location.href)).pathname;\n    }\n    console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n    let path = parsePath(url);\n    let queryString = url.split('?')[1];\n    const canProceed = await this.runGuards(path);\n    if (canProceed !== true) {\n      if (typeof canProceed === 'object') {\n        path = parsePath(canProceed.redirect);\n        queryString = canProceed.redirect.split('?')[1];\n      }\n      else {\n        return false;\n      }\n    }\n    this.setPath(path, direction, queryString);\n    return this.writeNavStateRoot(path, direction, animation);\n  }\n  /**\n   * Go back to previous page in the window.history.\n   */\n  back() {\n    window.history.back();\n    return Promise.resolve(this.waitPromise);\n  }\n  /** @internal */\n  async printDebug() {\n    console.debug('CURRENT PATH', this.getPath());\n    console.debug('PREVIOUS PATH', this.previousPath);\n    printRoutes(readRoutes(this.el));\n    printRedirects(readRedirects(this.el));\n  }\n  /** @internal */\n  async navChanged(direction) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\n      return false;\n    }\n    const { ids, outlet } = await readNavState(window.document.body);\n    const routes = readRoutes(this.el);\n    const chain = routerIDsToChain(ids, routes);\n    if (!chain) {\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n      return false;\n    }\n    const path = chainToPath(chain);\n    if (!path) {\n      console.warn('[ion-router] router could not match path because some required param is missing');\n      return false;\n    }\n    console.debug('[ion-router] nav changed -> update URL', ids, path);\n    this.setPath(path, direction);\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n    return true;\n  }\n  onRedirectChanged() {\n    const path = this.getPath();\n    if (path && routeRedirect(path, readRedirects(this.el))) {\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n    }\n  }\n  onRoutesChanged() {\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n  }\n  historyDirection() {\n    const win = window;\n    if (win.history.state === null) {\n      this.state++;\n      win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n    }\n    const state = win.history.state;\n    const lastState = this.lastState;\n    this.lastState = state;\n    if (state > lastState || (state >= lastState && lastState > 0)) {\n      return ROUTER_INTENT_FORWARD;\n    }\n    else if (state < lastState) {\n      return ROUTER_INTENT_BACK;\n    }\n    else {\n      return ROUTER_INTENT_NONE;\n    }\n  }\n  async writeNavStateRoot(path, direction, animation) {\n    if (!path) {\n      console.error('[ion-router] URL is not part of the routing set');\n      return false;\n    }\n    // lookup redirect rule\n    const redirects = readRedirects(this.el);\n    const redirect = routeRedirect(path, redirects);\n    let redirectFrom = null;\n    if (redirect) {\n      this.setPath(redirect.to, direction);\n      redirectFrom = redirect.from;\n      path = redirect.to;\n    }\n    // lookup route chain\n    const routes = readRoutes(this.el);\n    const chain = routerPathToChain(path, routes);\n    if (!chain) {\n      console.error('[ion-router] the path does not match any route');\n      return false;\n    }\n    // write DOM give\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\n  }\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    const unlock = await this.lock();\n    let changed = false;\n    try {\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\n    }\n    catch (e) {\n      console.error(e);\n    }\n    unlock();\n    return changed;\n  }\n  async lock() {\n    const p = this.waitPromise;\n    let resolve;\n    this.waitPromise = new Promise(r => resolve = r);\n    if (p !== undefined) {\n      await p;\n    }\n    return resolve;\n  }\n  async runGuards(to = this.getPath(), from = parsePath(this.previousPath)) {\n    if (!to || !from) {\n      return true;\n    }\n    const routes = readRoutes(this.el);\n    const toChain = routerPathToChain(to, routes);\n    const fromChain = routerPathToChain(from, routes);\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\n    if (canLeave === false || typeof canLeave === 'object') {\n      return canLeave;\n    }\n    const canEnter = beforeEnterHook ? await beforeEnterHook() : true;\n    if (canEnter === false || typeof canEnter === 'object') {\n      return canEnter;\n    }\n    return true;\n  }\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\n    if (this.busy) {\n      console.warn('[ion-router] router is busy, transition was cancelled');\n      return false;\n    }\n    this.busy = true;\n    // generate route event and emit will change\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\n    if (routeEvent) {\n      this.ionRouteWillChange.emit(routeEvent);\n    }\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\n    this.busy = false;\n    if (changed) {\n      console.debug('[ion-router] route changed', path);\n    }\n    // emit did change\n    if (routeEvent) {\n      this.ionRouteDidChange.emit(routeEvent);\n    }\n    return changed;\n  }\n  setPath(path, direction, queryString) {\n    this.state++;\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\n  }\n  getPath() {\n    return readPath(window.location, this.root, this.useHash);\n  }\n  routeChangeEvent(path, redirectFromPath) {\n    const from = this.previousPath;\n    const to = generatePath(path);\n    this.previousPath = to;\n    if (to === from) {\n      return null;\n    }\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n    return {\n      from,\n      redirectedFrom,\n      to,\n    };\n  }\n  get el() { return Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* i */ \"k\"])(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n  constructor(hostRef) {\n    Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* r */ \"o\"])(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = (ev) => {\n      Object(_theme_ff3fc52f_js__WEBPACK_IMPORTED_MODULE_3__[/* o */ \"d\"])(this.href, ev, this.routerDirection, this.routerAnimation);\n    };\n  }\n  render() {\n    const mode = Object(_ionic_global_63a97a32_js__WEBPACK_IMPORTED_MODULE_2__[\"b\"])(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel,\n      target: this.target\n    };\n    return (Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"j\"])(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* H */ \"c\"], { onClick: this.onClick, class: Object(_theme_ff3fc52f_js__WEBPACK_IMPORTED_MODULE_3__[/* c */ \"a\"])(this.color, {\n        [mode]: true,\n        'ion-activatable': true\n      }) }, Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"j\"])(\"a\", Object.assign({}, attrs), Object(_index_7a8b7a1c_js__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"j\"])(\"slot\", null))));\n  }\n};\nRouterLink.style = routerLinkCss;\n\n\n\n\n/***/ })\n\n}]);","inputSourceMap":null}