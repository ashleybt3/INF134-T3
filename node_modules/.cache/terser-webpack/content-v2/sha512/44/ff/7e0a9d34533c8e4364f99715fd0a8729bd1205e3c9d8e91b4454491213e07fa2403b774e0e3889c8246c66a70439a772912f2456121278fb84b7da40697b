{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{Tsnu:function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,\"startFocusVisible\",function(){return startFocusVisible});const FOCUS_KEYS=[\"Tab\",\"ArrowDown\",\"Space\",\"Escape\",\" \",\"Shift\",\"Enter\",\"ArrowLeft\",\"ArrowRight\",\"ArrowUp\"],startFocusVisible=()=>{let currentFocus=[],keyboardMode=!0;const doc=document,setFocus=elements=>{currentFocus.forEach(el=>el.classList.remove(\"ion-focused\")),elements.forEach(el=>el.classList.add(\"ion-focused\")),currentFocus=elements},pointerDown=()=>{keyboardMode=!1,setFocus([])};doc.addEventListener(\"keydown\",ev=>{keyboardMode=FOCUS_KEYS.includes(ev.key),keyboardMode||setFocus([])}),doc.addEventListener(\"focusin\",ev=>{if(keyboardMode&&ev.composedPath){const toFocus=ev.composedPath().filter(el=>!!el.classList&&el.classList.contains(\"ion-focusable\"));setFocus(toFocus)}}),doc.addEventListener(\"focusout\",()=>{doc.activeElement===doc.body&&setFocus([])}),doc.addEventListener(\"touchstart\",pointerDown),doc.addEventListener(\"mousedown\",pointerDown)}}}]);","name":"19-es2015.246cd36ff5b0efcabfc4.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[19],{\n\n/***/ \"Tsnu\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"startFocusVisible\", function() { return startFocusVisible; });\nconst ION_FOCUSED = 'ion-focused';\nconst ION_FOCUSABLE = 'ion-focusable';\nconst FOCUS_KEYS = ['Tab', 'ArrowDown', 'Space', 'Escape', ' ', 'Shift', 'Enter', 'ArrowLeft', 'ArrowRight', 'ArrowUp'];\nconst startFocusVisible = () => {\n  let currentFocus = [];\n  let keyboardMode = true;\n  const doc = document;\n  const setFocus = (elements) => {\n    currentFocus.forEach(el => el.classList.remove(ION_FOCUSED));\n    elements.forEach(el => el.classList.add(ION_FOCUSED));\n    currentFocus = elements;\n  };\n  const pointerDown = () => {\n    keyboardMode = false;\n    setFocus([]);\n  };\n  doc.addEventListener('keydown', ev => {\n    keyboardMode = FOCUS_KEYS.includes(ev.key);\n    if (!keyboardMode) {\n      setFocus([]);\n    }\n  });\n  doc.addEventListener('focusin', ev => {\n    if (keyboardMode && ev.composedPath) {\n      const toFocus = ev.composedPath().filter((el) => {\n        if (el.classList) {\n          return el.classList.contains(ION_FOCUSABLE);\n        }\n        return false;\n      });\n      setFocus(toFocus);\n    }\n  });\n  doc.addEventListener('focusout', () => {\n    if (doc.activeElement === doc.body) {\n      setFocus([]);\n    }\n  });\n  doc.addEventListener('touchstart', pointerDown);\n  doc.addEventListener('mousedown', pointerDown);\n};\n\n\n\n\n/***/ })\n\n}]);","inputSourceMap":null}